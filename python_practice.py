# -*- coding: utf-8 -*-
"""Python Practice.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17izM8hwVH-YNjzVqYGdz3VkUF9loAzqW
"""

#Hello World


print("Hello World")

#user input


name = input("Enter your Name: " )
print("Hello "+ name+"!")

#calculator

num1=input("Enter a Number: ")
num2=input("Enter another Number: ")
result=float(num1) + float(num2)

print(result)

#math

from math import *

print(min(5,6))
print(max(7,8))
print(sqrt(36))
print(round(3.7))
print(ceil(2.1))
print(floor(3.5))

#mad libs Game

color=input("Enter Color: ")
color_Violets=input("Enter Violets Color: ")

print("Roses are "+ color)
print("Violets are "+ color_Violets)
print("I love You")

#Strings

string="My name is Mujeeb"

print(string.lower())
print(string.upper())
print(len(string))
print(string[0])
print(string.islower())
print(string.lower().islower())
print("M" in string)
print(string.replace("M","N"))
print(string.index("M"))

#Lists
mujeeb=[3,4,2,1]
my_List=["Mujeeb" , "God" , "Top"]
print(my_List)
print(my_List[0])
print(my_List[-1])
my_List[0]="Johnny"
print(my_List)
print(my_List[1:])
print(my_List[0:2])
print(my_List[:2])

#list1=input("Enter a List : ")
#print(list1)
my_List.extend(mujeeb)
print(my_List)
print(my_List.pop())
non=["Mujeeb" , "pop" , "In"]
non.sort()
print(non)
non.reverse()
print(non)

#Tuple

Joni=(0,1,2)
print(Joni)
print(Joni[0])

#Tuple are immutable, once created can't change
#we can create Tuple in a list

list1=[(7,8) , (9,0)]
print(list1)
list1[1]=1,2 #we can change the list bcz they are mutable
print(list1)

#Functions

# syntax
#  def function_name(parameters)
# indentation  print(..............)
# call function by writing function name

def let_start(name):
    print("Lets Start "+ name )
    print("Do it "+name)
let_start("Mujeeb")

def say_hi(name,age):
    print(" Hello "+name)
    print(" According to Your information You are "+age)
say_hi("Mujeeb", "19")

#Force Formula Function
#Return Statement in Python

def force(mass,acceleration):
    return mass*acceleration

force(10,9.8)

#User Defined Function

def force(mass,acceleration):
    return mass*acceleration

mass=input("Enter mass: ")
acceleration=input("Enter Acceleration: ")

force(float(mass),float(acceleration))

#If Else in Python

is_Male=True

if is_Male:
    print("You are a Male")
else: 
    print("You are Not Male")

#Use of Else If in Python

is_male = True
is_tall = False

if is_male and is_tall:
    print("You are a male and Tall")
elif is_male and not(is_tall):
    print("You are not Tall")
else:
    print("You are not a male and not tall also")

#User defined function for max number


def max_num(num1 , num2 , num3):
    if num1>=num2 and num1>=3:
        return num1
    elif num2>=num1 and num2>=num3:
        return num2
    else:
        return num3

num1=input("Enter 1st Number: ")
num2=input("Enter 2nd Number: ")
num3=input("Enter 3rd Number: ")

max_num(float(num1),float(num2),float(num3))

#Calculator Using If Else

num1 = float(input("Enter 1st Number: "))
op = input("Enter Operator: ")
num2 = float(input("Enter 2nd Number: "))

if op == "+":
    print(num1 + num2)
elif op == "-":
    print(num1 - num2)
elif op == "*":
    print(num1 * num2)
elif op == "%":
    print(num1 % num2)
elif op == "/":
    print(num1 / num2)
else:
    print("Invalid Operator ")

#Dictionaries


weekDays = {
    1 : "Monday",
    2 : "Tuesday",
    3 : "Wednesday",
    4 : "Thrusday",
    5 : "Friday",
    6 : "Saturday",
    7 : "Sunday"
    
}
#Two way to access dictionary elements

print(weekDays.get(1))
print(weekDays[5])
print(weekDays.keys())
print(weekDays.values())

#While loop

i = 1
while i <= 10:
    print(i)
    
    i = i+1

print("Done")

#Guess Game

secret_word= "Snakes xd"
guess= ""

while guess != secret_word:
    guess = input("Enter Guess: ")
    
print("You Win!")

#Guess Game with limits

secret_word = "Snakes xd"
guess = ""
guess_count = 0
guess_limit = 3
out_of_guesses = False


while guess != secret_word and not(out_of_guesses):
    if guess_count < guess_limit:
        
        guess = input("Enter Guess: ")
        guess_count += 1
    else:
        
        out_of_guesses = True
if out_of_guesses:
    print("You are out of Guesses  YOU LOSE!")
else:
    print("You Win!")

#For Loop


for i in "Mujeeb":
    print(i)

#For loop in list

Mujeeb_BFFs = ["Mudasir" , "Umar Iqbal" , "Abdul Rehman"]

for BFFs in Mujeeb_BFFs:
    print(BFFs)

#Exponent Function

def raise_to_power(base_num,power_num):
    result = 1
    for index in range(power_num):
        result = result*base_num
    
    return result

base_num = int(input("Enter Base Number: "))
power_num = int(input("Enter Power Number: "))

raise_to_power(base_num,power_num)

#2D or Nested Lists

number = [
    [0, 2 , 4 , 5],
    [4, 6 , 7 , 8],
    [0, 3 , 5 , 9]
]

#to access them follow this syntax
# print(list_name[row number][column number])

print(number[0][1])

#2D or Nested Lists

number = [
    [0, 2 , 4 , 5],
    [4, 6 , 7 , 8],
    [0, 3 , 5 , 9]
]

#for printing all rows we gonna use for loop 

for row in number:
    print(row)

#2D or Nested Lists

number = [
    [0, 2 , 4 , 5],
    [4, 6 , 7 , 8],
    [0, 3 , 5 , 9]
]

#for printing all columns we gonna use another for loop 

for row in number:
    for col in row:
        print(col)

#Builiding a translator

def translate(phrase):
    translation = ""
    for letter in phrase:
        if letter in "AEIOUaeiou":
            if letter.isupper():
                translation = translation + "M"
            else:
                translation = translation + "m"
        else:
            translation = translation + letter
            
    return translation

print(translate(input("Enter a phrase: ")))

#Try/Except

try:
    number = int(input("Enter a number: "))
    print(number)
except:
    print("Invalid Input ")

#Class

class Myclass:
        x = 5
        
#Simple Object

c1 = Myclass()
print(c1.x)

#Use of built in function __init__()


#Create a Class:

class Student:
    
    #use a built in function:
    def __init__(self , name , age , roll_no):
        self.name = name
        self.age = age
        self.roll_no = roll_no
        
#Create an object of Class:

student = Student("Mujeeb" , "19" , "2049")

#Modify Object Properties:

student.age  = 20

#Del Object Properties:

#del student.age

#print them all by calling object:

print(student.name)
print(student.age)
print(student.roll_no)

#Create a Class:
class Student:
    #Use a built in Function:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    #Create a Method that can be accessed by Object to call:
    
    def myfunc(self):
        print("Hello My name is " + self.name)
        print("My age is " + str(self.age))
        
#Create an Object:

student = Student("Mujeeb", 19)

#Use method to call Object:

student.myfunc()

#Inheritance

#Creation of Parent Class:

class Person:
    def __init__(self , first_n , nick_n):
        
        self.first_n = first_n
        self.nick_n = nick_n
    
    def printit(self):
        print(self.first_n , self.nick_n)

#Use the Person class to create an object, and then execute the printit method:

x = Person("Mujeeb", "Johnny")
x.printit()

#Inheritance

#Creation of Child class:

class Person:
    def __init__(self , f_name , l_name):
        
        self.f_name  = f_name
        self.l_name  = l_name
        
    def printit(self):
        print(self.f_name , self.l_name)
        
#At this point we will create a Child class named as stuent:

class Student(Person):
    pass

#And Here Gonna print it using Child Class:

x = Student("Mohammad" , "Mujeeb")
x.printit()

#Super Function in Inheritance
'''
Python also has a super() function that will make the child class inherit all 
the methods and properties from its parent:

'''
class Person:
    def __init__(self, fname, lname):
        self.firstname = fname
        self.lastname = lname
    
    def printit(self):
        print(self.firstname, self.lastname)
      

      

class Student(Person):
      def __init__(self, fname, lname):
        super().__init__(fname, lname)

x = Student("Mohammad", "Mujeeb")
x.printit()

'''
By using the super() function you do not have to use the name of the parent element 
it will automatically inherit the methods and properties from its parent.

'''

#Add __init__ function to inheritance
class Person:
    def __init__(self, fname, lname):
        self.firstname = fname
        self.lastname = lname
    
    def printit(self):
        print(self.firstname, self.lastname)
      

      

class Student(Person):
      def __init__(self, fname, lname):
#This use of Person.__init__(......) will inherit all to Student(Person). 
#In this you have to use parent name but in super you just need to use super keyword in place of parent
        Person.__init__(self , fname, lname)

x = Student("Mohammad", "Mujeeb")
x.printit()

class Person:
    def __init__(self, fname, lname , graduatedinyear):
        self.firstname = fname
        self.lastname = lname
        self.graduatedinyear = str(graduatedinyear)
    def printit(self):
        print("You are Welcome " + self.firstname, self.lastname + " Graduated in Year " + self.graduatedinyear)
      

      

class Student(Person):
      def __init__(self, fname, lname,graduatedinyear):
        super().__init__(fname, lname, graduatedinyear)
        
        
x = Student("Mohammad", "Mujeeb",2019)
x.printit()

#Do_it..........

a = 'Python'
b = [1,2,3]

aTup = (a,b)

print(aTup[1][1:])

